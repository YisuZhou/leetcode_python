# 用的是和三数之和一样的算法，但是这个不超时
class Solution:
    def threeSumClosest(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """

        nums.sort()
        delta = 10**10
        for i_left in range(len(nums)-2):
            i_mid = i_left + 1
            i_right = len(nums)-1
            while i_mid < i_right:
                cur_sum = nums[i_left] + nums[i_mid] + nums[i_right]
                if cur_sum == target:
                    return target
                elif cur_sum > target:
                    if abs(cur_sum-target) < delta:
                        ans = cur_sum
                        delta = abs(cur_sum-target)
                    i_right -= 1
                else:
                    if abs(cur_sum-target) < delta:
                        ans = cur_sum
                        delta = abs(cur_sum-target)
                    i_mid += 1
        
        return ans
                    
                        
